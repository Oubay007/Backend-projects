{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN0MSoCMt6URvwSf1kHuzLK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Oubay007/Backend-projects/blob/main/Untitled8.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "zEfV5w7VglGf",
        "outputId": "52573310-40c3-41a5-f7f1-20aeaa94c77b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-76850f20-e3d3-425d-870a-774810e7f75c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-76850f20-e3d3-425d-870a-774810e7f75c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving instructions.txt to instructions (15).txt\n",
            "🧽 Cleaned Instructions:\n",
            "🔍 Searching images for prompt: wake up\n",
            "✅ Image URL: https://images.pexels.com/photos/3807632/pexels-photo-3807632.jpeg\n",
            "🔍 Searching images for prompt: wash face\n",
            "✅ Image URL: https://images.pexels.com/photos/3762466/pexels-photo-3762466.jpeg\n",
            "🔍 Searching images for prompt: breakfast\n",
            "✅ Image URL: https://images.pexels.com/photos/103124/pexels-photo-103124.jpeg\n",
            "🔍 Searching images for prompt: laundry\n",
            "✅ Image URL: https://images.pexels.com/photos/6189138/pexels-photo-6189138.jpeg\n",
            "🔍 Searching images for prompt: gym\n",
            "✅ Image URL: https://images.pexels.com/photos/1954524/pexels-photo-1954524.jpeg\n",
            "🔍 Searching images for prompt: shower\n",
            "✅ Image URL: https://images.pexels.com/photos/5240780/pexels-photo-5240780.jpeg\n",
            "🔍 Searching images for prompt: lunch\n",
            "✅ Image URL: https://images.pexels.com/photos/1640777/pexels-photo-1640777.jpeg\n",
            "\n",
            " All Pexels Image URLs:\n",
            "1: https://images.pexels.com/photos/3807632/pexels-photo-3807632.jpeg\n",
            "2: https://images.pexels.com/photos/3762466/pexels-photo-3762466.jpeg\n",
            "3: https://images.pexels.com/photos/103124/pexels-photo-103124.jpeg\n",
            "4: https://images.pexels.com/photos/6189138/pexels-photo-6189138.jpeg\n",
            "5: https://images.pexels.com/photos/1954524/pexels-photo-1954524.jpeg\n",
            "6: https://images.pexels.com/photos/5240780/pexels-photo-5240780.jpeg\n",
            "7: https://images.pexels.com/photos/1640777/pexels-photo-1640777.jpeg\n"
          ]
        }
      ],
      "source": [
        "import re\n",
        "import requests\n",
        "from google.colab import files\n",
        "import json\n",
        "\n",
        "uploaded = files.upload()\n",
        "filename = list(uploaded.keys())[0]\n",
        "\n",
        "\n",
        "with open(filename, 'r') as f:\n",
        "    lines = f.readlines()\n",
        "\n",
        "pattern = r'^\\s*\\d+\\s*[-.)]\\s*'\n",
        "clean_instructions = []\n",
        "\n",
        "for line in lines:\n",
        "    line = line.strip()\n",
        "    line = re.sub(pattern, '', line)\n",
        "    if line:\n",
        "        clean_instructions.append(line)\n",
        "\n",
        "print(\" Cleaned Instructions:\")\n",
        "\n",
        "API_key = \"ROfpXM995kR7ce34kkqIl3gvZfSol4OJZcTjT6y0RNrRg2UOMMY98KCY\"\n",
        "\n",
        "headers = {\n",
        "\n",
        "           \"Authorization\": API_key\n",
        "}\n",
        "\n",
        "images = []\n",
        "\n",
        "\n",
        "for element in clean_instructions:\n",
        "  print(f\"🔍 Searching images for prompt: {element}\")\n",
        "\n",
        "  params = {\n",
        "\n",
        "      \"query\": element,\n",
        "      \"per_page\": 1\n",
        "            }\n",
        "\n",
        "  response = requests.get(\"https://api.pexels.com/v1/search\", headers=headers, params=params)\n",
        "\n",
        "  if response.status_code == 200:\n",
        "        data = response.json()\n",
        "        if data['photos']:\n",
        "            image_url = data['photos'][0]['src']['original']\n",
        "            images.append(image_url)\n",
        "            print(f\"✅ Image URL: {image_url}\")\n",
        "        else:\n",
        "            print(f\"⚠️ No images found for prompt: {element}\")\n",
        "            images.append(None)\n",
        "\n",
        "\n",
        "print(\"\\n All Pexels Image URLs:\")\n",
        "for i, url in enumerate(images, start=1):\n",
        "    print(f\"{i}: {url}\")\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}
